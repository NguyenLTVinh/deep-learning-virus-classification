# -*- coding: utf-8 -*-
"""VIRUSMNIST_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DhPabUHrYsV3N9PEkqQA57eNhuRP9ar8
"""

from google.colab import drive

drive.mount('/content/drive')
datamunge_virusmnist_path = '/content/drive/MyDrive/5527_project/virusmnist'

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams
# %matplotlib inline
from skimage.io.collection import ImageCollection
import imageio
import os
import matplotlib.pyplot as plt


rcParams['figure.facecolor'] = 'lightgray'
rcParams['figure.figsize'] = (13, 5)

train = pd.read_csv('/content/drive/MyDrive/5527_project/virusmnist/train.csv')
train.drop('hash', axis = 1, inplace = True)

test = pd.read_csv('/content/drive/MyDrive/5527_project/virusmnist/test.csv')
labels = pd.read_csv('/content/drive/MyDrive/5527_project/virusmnist/trainLabels.csv')

print('Training set:\n')
train.head(3)

print('Test set:\n')
test.head(3)

print(f'Labels:\n{labels}')

print('Train set missing:', train.isna().sum().sum())
print('Test set missing:',test.isna().sum().sum())

m, nx = train.shape
m_test, nx_test = test.shape

print(f'\nTrain Examples: {m}    Features: {nx}')
print(f'\nTest Examples: {m_test}    Features: {nx_test}')

num_classes = train.label.nunique()
num_missing = train.isna().sum().sum()

num_classes_test = test.label.nunique()
num_missing_test = test.isna().sum().sum()

print(f'\nTrain Classes: {num_classes}    Missing: {num_missing}')
print(f'\nTest Classes: {num_classes_test}    Missing: {num_missing_test}')

total_examples = m + m_test

print(f'\nTotal Examples: {total_examples}')

images = []
plt.figure(figsize=(10, 20), tight_layout=True)

for i in range(num_classes):
    image_path = f'/content/drive/MyDrive/5527_project/virusmnist/train/{i}/'
    img_file = next((f for f in os.listdir(image_path) if f.endswith('1.jpg')), None)

    if img_file:
        img = imageio.imread(os.path.join(image_path, img_file))
        images.append(img)
        plt.subplot(num_classes, 5, i + 1)
        plt.imshow(img)
        plt.axis('off')
        plt.title(str(i))

plt.suptitle('Virus Image Examples\n')
plt.show()

pixel_means = train.groupby('label', axis = 0).mean()
pixel_stds = train.groupby('label', axis = 0).std()
pixel_medians = train.groupby('label', axis = 0).median()

print(f'Pixel means:\n{pixel_means}\n')
print(f'Pixel standard deviations:\n{pixel_stds}\n')
print(f'Pixel medians:\n{pixel_medians}')

print('The test/train ratio: ', len(test) / len(train))

plt.figure()
train['label'].plot.hist(bins = 10, ec = 'k')
test['label'].plot.hist(bins = 10, ec = 'k')
plt.legend(['train', 'test'])
_ = plt.title('Train & Test Distribution Comparison')
plt.show()

print('Correlation:')
plt.figure()
sns.heatmap(train.corr(), vmin = -1, vmax = 1)
plt.title('Pearson r Correlations')
plt.show()

print('\nCovariance:')
plt.figure()
sns.heatmap(train.cov())
plt.title('Covariances')
plt.show()

sums = train.groupby('label').sum().T.describe().loc[['mean', 'min', 'max','std'], :].T
lengths = train.groupby('label').count().iloc[:, 0]
print(f'Lengths:\n{lengths}\n\nSums:\n\n{sums}')

print('Pixel sums by class:')
sums.drop('std', axis = 1).sort_values(by = 'mean', ascending = False).T.plot.bar(ec = 'k')
plt.title('Trends in Aggregate Statistics')
plt.show()
sums[['std']].sort_values(by = 'std', ascending = False).T.plot.bar(ec = 'k')
plt.title('Standard Deviation of Pixel Sums')
plt.show()

means = pixel_means.T.describe().loc[['mean', 'min', 'max','std'], :].T
print('Pixel means by class:\n')
means.drop('std', axis = 1).sort_values(by = 'mean', ascending = False).T.plot.bar(ec = 'k')
_ = plt.title('Average, Min, and Max of Pixel Means')
plt.show()
means[['std']].sort_values(by = 'std', ascending = False).T.plot.bar(ec = 'k')
_ = plt.title('Standard Deviation of Pixel Means')
plt.show()

medians = pixel_medians.T.describe().loc[['mean', 'max', 'min', 'std'], :].T
medians

print('Pixel medians by class:')
medians.drop('std', axis = 1).sort_values(by = 'mean', ascending = False).T.plot.bar(ec = 'k')
plt.title('Trends & Groups in Pixel Medians')
plt.show()

medians[['std']].sort_values(by = 'std', ascending = False).T.plot.bar(ec = 'k')
plt.title('Pixel Median Standard Deviation')
plt.show()

# Helper function
def class_hist(df):
    # Creates a histogram of a pic from each class
    vals = np.sort(df['label'].unique())
    plt.figure(tight_layout = True)
    # Returns histograms by class
    for i, clss in enumerate(vals):
        plt.subplot(len(vals), 1, i + 1)
        tmp = df[df['label'] == clss].drop('label', axis = 1).iloc[0, :]
        tmp.plot.hist(bins = 255, figsize = (13, 13), edgecolor = 'k')
        plt.ylabel('Class {}'.format(clss))
    plt.suptitle('Sample Class Histograms')
    plt.show()

class_hist(train)

tmp = pixel_means.T

plt.figure()
sns.displot(tmp, bins = 255, height = 5, aspect = 2.8, alpha = .5)
_ = plt.title('Pixel Mean Distributions')
plt.show()

print('Distribution of pixel mean values for each class:\n')
for num, i in enumerate(tmp.columns):
    sns.displot(tmp[i], bins = 255, kde = True,
                height = 5, aspect = 2)
    plt.xlabel('Pixel Means')
    plt.title('Class ' + str(num))

for num, i in enumerate(tmp.columns):
    sns.displot(tmp[i], height = 5, aspect = 2.4, kind = 'ecdf')
    plt.xlabel('Pixel Means')
    plt.title('Class ' + str(num))
    _ = plt.show()

pix_range = train.groupby('label').max().T - train.groupby('label').min().T
ranges = pix_range.describe().T[['mean', 'max', 'min', 'std']]


print('Pixel Range Statistics:\n')
ranges

ranges.drop('std', axis = 1).sort_values(by = 'mean', ascending = False).T.plot.bar(figsize = (14, 4), ec = 'k')
_ = plt.title('Aggregated Statistics')
plt.show()

ranges[['std']].sort_values(by = 'std', ascending = False).T.plot.bar(figsize = (14, 4),  ec = 'k')
_ = plt.title('Range Standard Deviations')
plt.show()